using System;
using FMOD.Arguments;
using FMOD.Core;

namespace FMOD.DSP
{
	/// <inheritdoc />
	/// <summary>
	///     A signal generator.
	/// </summary>
	/// <seealso cref="T:FMOD.NET.Dsp" />
	public class Oscillator : Dsp
	{
		/// <summary>
		///     Describes the shape the waveform generated by the <see cref="Oscillator" />.
		/// </summary>
		public enum WaveformType
		{
			/// <summary>
			///     Sine
			/// </summary>
			Sine,

			/// <summary>
			///     Square
			/// </summary>
			Square,

			/// <summary>
			///     Saw up
			/// </summary>
			SawUp,

			/// <summary>
			///     Saw down
			/// </summary>
			SawDown,

			/// <summary>
			///     Triangle
			/// </summary>
			Triangle,

			/// <summary>
			///     Noise
			/// </summary>
			Noise
		}

		/// <summary>
		///     Initializes a new instance of the <see cref="Oscillator" /> class.
		/// </summary>
		/// <param name="handle">The handle.</param>
		internal Oscillator(IntPtr handle) : base(handle)
		{
		}

		/// <summary>
		///     Gets or sets the shape of the waveform.
		/// </summary>
		/// <value>
		///     The type of the oscillator.
		/// </value>
		public WaveformType OscillatorType
		{
			get => (WaveformType) GetParameterInt(0);
			set
			{
				SetParameterInt(0, (int) value);
				OscilallatorTypeChanged?.Invoke(this, EventArgs.Empty);
			}
		}

		/// <summary>
		///     <para>Gets or sets the frequency of the sinewave in Hz.</para>
		///     <para><c>1.0</c> to <c>22000.0</c>. Default = <c>220.0</c>.</para>
		/// </summary>
		/// <value>
		///     The frequency.
		/// </value>
		public float Frequency
		{
			get => GetParameterFloat(1);
			set
			{
				var clamped = value.Clamp(1.0f, 22000.0f);
				SetParameterFloat(1, clamped);
				FrequencyChanged?.Invoke(this, new FloatParamEventArgs(1, clamped, 1.0f, 22000.0f));
			}
		}

		/// <summary>
		///     Occurs when <see cref="OscillatorType" /> property has changed.
		/// </summary>
		/// <seealso cref="WaveformType" />
		public event EventHandler OscilallatorTypeChanged;

		/// <summary>
		///     Occurs when <see cref="Frequency" /> property has changed.
		/// </summary>
		/// <seealso cref="FloatParamEventArgs" />
		public event EventHandler<FloatParamEventArgs> FrequencyChanged;
	}
}