//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FMOD.Sharp {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ResultStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ResultStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FMOD.Sharp.ResultStrings", typeof(ResultStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified resource is already locked..
        /// </summary>
        internal static string AlreadyLocked {
            get {
                return ResourceManager.GetString("AlreadyLocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tried to call a function on a data type that does not allow this type of functionality (ie calling Sound.Lock on a streaming sound)..
        /// </summary>
        internal static string BadCommand {
            get {
                return ResourceManager.GetString("BadCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error trying to allocate a channel..
        /// </summary>
        internal static string ChannelAlloc {
            get {
                return ResourceManager.GetString("ChannelAlloc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified channel has been reused to play another sound..
        /// </summary>
        internal static string ChannelStolen {
            get {
                return ResourceManager.GetString("ChannelStolen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DMA Failure. See debug output for more information..
        /// </summary>
        internal static string Dma {
            get {
                return ResourceManager.GetString("Dma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSP connection error. Connection possibly caused a cyclic dependency or connected DSPs with incompatible buffer counts..
        /// </summary>
        internal static string DspConnection {
            get {
                return ResourceManager.GetString("DspConnection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSP return code from a DSP process query callback.Tells mixer not to call the process callback and therefore not consume CPU. Use this to optimize the DSP graph..
        /// </summary>
        internal static string DspDontProcess {
            get {
                return ResourceManager.GetString("DspDontProcess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSP Format error. A DSP unit may have attempted to connect to this network with the wrong format, or a matrix may have been set with the wrong size if the target unit has a specified channel map..
        /// </summary>
        internal static string DspFormat {
            get {
                return ResourceManager.GetString("DspFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSP is already in the mixer&apos;s DSP network. 
        ///It must be removed before being reinserted or released..
        /// </summary>
        internal static string DspInUse {
            get {
                return ResourceManager.GetString("DspInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSP connection error. 
        ///Couldn&apos;t find the DSP unit specified..
        /// </summary>
        internal static string DspNotFound {
            get {
                return ResourceManager.GetString("DspNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSP operation error.
        ///Cannot perform operation on this DSP as it is reserved by the system..
        /// </summary>
        internal static string DspReserved {
            get {
                return ResourceManager.GetString("DspReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSP return code from a DSP process query callback. 
        ///Tells mixer silence would be produced from read, so go idle and not consume CPU.  
        ///Use this to optimize the DSP graph..
        /// </summary>
        internal static string DspSilence {
            get {
                return ResourceManager.GetString("DspSilence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSP operation cannot be performed on a DSP of this type..
        /// </summary>
        internal static string DspType {
            get {
                return ResourceManager.GetString("DspType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified bank has already been loaded..
        /// </summary>
        internal static string EventAlreadyLoaded {
            get {
                return ResourceManager.GetString("EventAlreadyLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The live update connection failed due to the game already being connected..
        /// </summary>
        internal static string EventLiveUpdateBusy {
            get {
                return ResourceManager.GetString("EventLiveUpdateBusy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The live update connection failed due to the game data being out of sync with the tool..
        /// </summary>
        internal static string EventLiveUpdateMismatch {
            get {
                return ResourceManager.GetString("EventLiveUpdateMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The live update connection timed out..
        /// </summary>
        internal static string EventLiveUpdateTimeout {
            get {
                return ResourceManager.GetString("EventLiveUpdateTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested event, bus or vca could not be found..
        /// </summary>
        internal static string EventNotFound {
            get {
                return ResourceManager.GetString("EventNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error loading file..
        /// </summary>
        internal static string FileBad {
            get {
                return ResourceManager.GetString("FileBad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t perform seek operation. 
        ///This is a limitation of the medium (ie netstreams) or the file format..
        /// </summary>
        internal static string FileCouldNotSeek {
            get {
                return ResourceManager.GetString("FileCouldNotSeek", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Media was ejected while reading..
        /// </summary>
        internal static string FileDiskEjected {
            get {
                return ResourceManager.GetString("FileDiskEjected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of current chunk reached while trying to read data..
        /// </summary>
        internal static string FileEndOfData {
            get {
                return ResourceManager.GetString("FileEndOfData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of file unexpectedly reached while trying to read essential data (truncated?)..
        /// </summary>
        internal static string FileEof {
            get {
                return ResourceManager.GetString("FileEof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found..
        /// </summary>
        internal static string FileNotfound {
            get {
                return ResourceManager.GetString("FileNotfound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported file or audio format..
        /// </summary>
        internal static string Format {
            get {
                return ResourceManager.GetString("Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a version mismatch between the FMOD header and either the FMOD Studio library or the FMOD Low Level library..
        /// </summary>
        internal static string HeaderMismatch {
            get {
                return ResourceManager.GetString("HeaderMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A HTTP error occurred. 
        ///This is a catch-all for HTTP errors not listed elsewhere..
        /// </summary>
        internal static string Http {
            get {
                return ResourceManager.GetString("Http", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified resource requires authentication or is forbidden..
        /// </summary>
        internal static string HttpAccess {
            get {
                return ResourceManager.GetString("HttpAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Proxy authentication is required to access the specified resource..
        /// </summary>
        internal static string HttpProxyAuth {
            get {
                return ResourceManager.GetString("HttpProxyAuth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A HTTP server error occurred..
        /// </summary>
        internal static string HttpServerError {
            get {
                return ResourceManager.GetString("HttpServerError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HTTP request timed out..
        /// </summary>
        internal static string HttpTimeout {
            get {
                return ResourceManager.GetString("HttpTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FMOD was not initialized correctly to support this function..
        /// </summary>
        internal static string Initialization {
            get {
                return ResourceManager.GetString("Initialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot call this command after FmodSystem.Initialize..
        /// </summary>
        internal static string Initialized {
            get {
                return ResourceManager.GetString("Initialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred that wasn&apos;t supposed to. 
        ///Contact support..
        /// </summary>
        internal static string Internal {
            get {
                return ResourceManager.GetString("Internal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value passed in was a NaN, infinite, or denormalized float..
        /// </summary>
        internal static string InvalidFloat {
            get {
                return ResourceManager.GetString("InvalidFloat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid object handle was used..
        /// </summary>
        internal static string InvalidHandle {
            get {
                return ResourceManager.GetString("InvalidHandle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to this function..
        /// </summary>
        internal static string InvalidParam {
            get {
                return ResourceManager.GetString("InvalidParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid seek position was passed to this function..
        /// </summary>
        internal static string InvalidPosition {
            get {
                return ResourceManager.GetString("InvalidPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid speaker was passed to this function based on the current speaker mode..
        /// </summary>
        internal static string InvalidSpeaker {
            get {
                return ResourceManager.GetString("InvalidSpeaker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid string was passed to this function..
        /// </summary>
        internal static string InvalidString {
            get {
                return ResourceManager.GetString("InvalidString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The syncpoint did not come from this sound handle..
        /// </summary>
        internal static string InvalidSyncpoint {
            get {
                return ResourceManager.GetString("InvalidSyncpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tried to call a function on a thread that is not supported..
        /// </summary>
        internal static string InvalidThread {
            get {
                return ResourceManager.GetString("InvalidThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The vectors passed in are not unit length, or perpendicular..
        /// </summary>
        internal static string InvalidVector {
            get {
                return ResourceManager.GetString("InvalidVector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reached maximum audible playback count for this sound&apos;s soundgroup..
        /// </summary>
        internal static string MaxAudible {
            get {
                return ResourceManager.GetString("MaxAudible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough memory or resources..
        /// </summary>
        internal static string Memory {
            get {
                return ResourceManager.GetString("Memory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t use Mode.OpenMemoryPoint on non PCM source data, or non mp3/xma/adpcm data if Mode.CreateCompressedSample was used..
        /// </summary>
        internal static string MemoryCantPoint {
            get {
                return ResourceManager.GetString("MemoryCantPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tried to call a command on a 2D sound when the command was meant for 3D sound..
        /// </summary>
        internal static string Needs3D {
            get {
                return ResourceManager.GetString("Needs3D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tried to use a feature that requires hardware support..
        /// </summary>
        internal static string NeedsHardware {
            get {
                return ResourceManager.GetString("NeedsHardware", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t connect to the specified host..
        /// </summary>
        internal static string NetConnect {
            get {
                return ResourceManager.GetString("NetConnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A socket error occurred. 
        ///This is a catch-all for socket-related errors not listed elsewhere..
        /// </summary>
        internal static string NetSocketError {
            get {
                return ResourceManager.GetString("NetSocketError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified URL couldn&apos;t be resolved..
        /// </summary>
        internal static string NetUrl {
            get {
                return ResourceManager.GetString("NetUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation on a non-blocking socket could not complete immediately..
        /// </summary>
        internal static string NetWouldBlock {
            get {
                return ResourceManager.GetString("NetWouldBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified resource is not locked, so it can&apos;t be unlocked..
        /// </summary>
        internal static string NotLocked {
            get {
                return ResourceManager.GetString("NotLocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation could not be performed because specified sound/DSP connection is not ready..
        /// </summary>
        internal static string NotRead {
            get {
                return ResourceManager.GetString("NotRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No errors..
        /// </summary>
        internal static string OK {
            get {
                return ResourceManager.GetString("OK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error initializing output device, but more specifically, the output device is already in use and cannot be reused..
        /// </summary>
        internal static string OutputAllocated {
            get {
                return ResourceManager.GetString("OutputAllocated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error creating hardware sound buffer..
        /// </summary>
        internal static string OutputCreateBuffer {
            get {
                return ResourceManager.GetString("OutputCreateBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call to a standard soundcard driver failed, which could possibly mean a bug in the driver or resources were missing or exhausted..
        /// </summary>
        internal static string OutputDriverCall {
            get {
                return ResourceManager.GetString("OutputDriverCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Soundcard does not support the specified format..
        /// </summary>
        internal static string OutputFormat {
            get {
                return ResourceManager.GetString("OutputFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error initializing output device..
        /// </summary>
        internal static string OutputInit {
            get {
                return ResourceManager.GetString("OutputInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The output device has no drivers installed. 
        ///If pre-init, OutputType.NoSound is selected as the output mode.  
        ///If post-init, the function just fails..
        /// </summary>
        internal static string OutputNoDrivers {
            get {
                return ResourceManager.GetString("OutputNoDrivers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unspecified error has been returned from a plugin..
        /// </summary>
        internal static string Plugin {
            get {
                return ResourceManager.GetString("Plugin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A requested output DSP unit type or codec was not available..
        /// </summary>
        internal static string PluginMissing {
            get {
                return ResourceManager.GetString("PluginMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A resource that the plugin requires cannot be found. (ie the DLS file for MIDI playback).
        /// </summary>
        internal static string PluginResource {
            get {
                return ResourceManager.GetString("PluginResource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A plugin was built with an unsupported SDK version..
        /// </summary>
        internal static string PluginVersion {
            get {
                return ResourceManager.GetString("PluginVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred trying to initialize the recording device..
        /// </summary>
        internal static string Record {
            get {
                return ResourceManager.GetString("Record", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified recording driver has been disconnected..
        /// </summary>
        internal static string RecordDisconnected {
            get {
                return ResourceManager.GetString("RecordDisconnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reverb properties cannot be set on this channel because a parent channelgroup owns the reverb connection..
        /// </summary>
        internal static string ReverbChannelgroup {
            get {
                return ResourceManager.GetString("ReverbChannelgroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified instance in ReverbProperties couldn&apos;t be set. 
        ///Most likely because it is an invalid instance number or the reverb doesn&apos;t exist..
        /// </summary>
        internal static string ReverbInstance {
            get {
                return ResourceManager.GetString("ReverbInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified resource is not loaded, so it can&apos;t be unloaded..
        /// </summary>
        internal static string StudioNotLoaded {
            get {
                return ResourceManager.GetString("StudioNotLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Studio::System object is not yet initialized..
        /// </summary>
        internal static string StudioUninitialized {
            get {
                return ResourceManager.GetString("StudioUninitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This subsound is already being used by another sound, you cannot have more than one parent to a sound.  
        ///Null out the other parent&apos;s entry first..
        /// </summary>
        internal static string SubsoundAllocated {
            get {
                return ResourceManager.GetString("SubsoundAllocated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shared subsounds cannot be replaced or moved from their parent stream, such as when the parent stream is an FSB file..
        /// </summary>
        internal static string SubsoundCantMove {
            get {
                return ResourceManager.GetString("SubsoundCantMove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The error occurred because the sound referenced contains subsounds when it shouldn&apos;t have, or it doesn&apos;t contain subsounds when it should have.  
        ///The operation may also not be able to be performed on a parent sound..
        /// </summary>
        internal static string Subsounds {
            get {
                return ResourceManager.GetString("Subsounds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified tag could not be found or there are no tags..
        /// </summary>
        internal static string TagNotFound {
            get {
                return ResourceManager.GetString("TagNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sound created exceeds the allowable input channel count. 
        ///This can be increased using the &quot;maxInputChannels&quot; parameter in FmodSystem.SetSoftwareFormat..
        /// </summary>
        internal static string TooManyChannels {
            get {
                return ResourceManager.GetString("TooManyChannels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length provided exceed the allowable limit..
        /// </summary>
        internal static string TooManySamples {
            get {
                return ResourceManager.GetString("TooManySamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The retrieved string is too long to fit in the supplied buffer and has been truncated..
        /// </summary>
        internal static string Truncated {
            get {
                return ResourceManager.GetString("Truncated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Something in FMOD hasn&apos;t been implemented when it should be! contact support!.
        /// </summary>
        internal static string Unimplemented {
            get {
                return ResourceManager.GetString("Unimplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command failed because FmodSystem.Initialize or FmodSystem.SetDriver was not called..
        /// </summary>
        internal static string Uninitialized {
            get {
                return ResourceManager.GetString("Uninitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A command issued was not supported by this object. 
        ///Possibly a plugin without certain callbacks specified..
        /// </summary>
        internal static string Unsupported {
            get {
                return ResourceManager.GetString("Unsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version number of this file format is not supported..
        /// </summary>
        internal static string Version {
            get {
                return ResourceManager.GetString("Version", resourceCulture);
            }
        }
    }
}
